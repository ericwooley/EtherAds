/* tslint:disable */
/**
 * This file was auto generated by generate-types, written by https://github.com/ericwooley.
 * Edit at your own risk.
 **/

import BigNumber from 'bignumber.js'

type DeployEventEmitter<T> = {
  on: (event: string, callBack: Function) => IDeployPromise<T>
}

interface IDeployPromise<T> {
  send: (
    options: {
      from: string
      gas: number | string
      gasPrice: number | string
    },
    onError: (error: Error, transactionHash: string) => any
  ) => Promise<T> & {
    on: (event: string, callBack: Function) => DeployEventEmitter<T>
  }
}

type DeployArgs = {
  data: string
  arguments: [string]
}

type IAdFactoryEvents = 'ContractCreated' | 'allEvents'

interface Event {
  returnValues: Object
  raw: {
    data: string
    topics: string[]
  }
  event: string
  signature: string
  logIndex: number
  transactionIndex: number
  transactionHash: string
  blockHash: string
  blockNumber: number
  address: string
}

interface IEventOptions {
  filter: Object
  fromBlock: number
  topics: string[]
}

type EventCallBack = (error: Error | void, event: Event) => any

type EventEmitter = {
  on: (
    type: 'data' | 'changed' | 'error',
    callBack: (event: Event | Error) => any
  ) => EventEmitter
}

export interface IAdFactory {
  clone: () => IAdFactory
  deploy: (options: DeployArgs) => IDeployPromise<IAdFactory>
  options: {
    address: string
    jsonInterface: Object[]
    data: string
    from: string
    gasPrice: string
    gas: BigNumber
  }
  methods: {
    withdraw: () => {
      call: (
        options: { from: string; gas: string; gasPrice: string },
        callBack: (error: Error | void, result: null) => any
      ) => IDeployPromise<null>
      send: (
        options: { from: string; gas: string; gasPrice: string },
        callBack: (error: Error | void, result: null) => any
      ) => IDeployPromise<null>
      estimateGas: (
        options: { from: string; gas: string; gasPrice: string },
        callBack: (error: Error | void, result: null) => any
      ) => Promise<null>
      encodeABI: () => string
    }
    deployAd: (
      _weiPerHour: BigNumber,
      _autoApprove: boolean
    ) => {
      call: (
        options: { from: string; gas: string; gasPrice: string },
        callBack: (error: Error | void, result: null) => any
      ) => IDeployPromise<null>
      send: (
        options: { from: string; gas: string; gasPrice: string },
        callBack: (error: Error | void, result: null) => any
      ) => IDeployPromise<null>
      estimateGas: (
        options: { from: string; gas: string; gasPrice: string },
        callBack: (error: Error | void, result: null) => any
      ) => Promise<null>
      encodeABI: () => string
    }
    testRet: (
      idx: BigNumber
    ) => {
      call: (
        options: { from: string; gas: string; gasPrice: string },
        callBack: (error: Error | void, result: string) => any
      ) => IDeployPromise<string>
      send: (
        options: { from: string; gas: string; gasPrice: string },
        callBack: (error: Error | void, result: string) => any
      ) => IDeployPromise<string>
      estimateGas: (
        options: { from: string; gas: string; gasPrice: string },
        callBack: (error: Error | void, result: string) => any
      ) => Promise<string>
      encodeABI: () => string
    }
    donationAddress: () => {
      call: (
        options: { from: string; gas: string; gasPrice: string },
        callBack: (error: Error | void, result: string) => any
      ) => IDeployPromise<string>
      send: (
        options: { from: string; gas: string; gasPrice: string },
        callBack: (error: Error | void, result: string) => any
      ) => IDeployPromise<string>
      estimateGas: (
        options: { from: string; gas: string; gasPrice: string },
        callBack: (error: Error | void, result: string) => any
      ) => Promise<string>
      encodeABI: () => string
    }
    test: () => {
      call: (
        options: { from: string; gas: string; gasPrice: string },
        callBack: (error: Error | void, result: string[]) => any
      ) => IDeployPromise<string[]>
      send: (
        options: { from: string; gas: string; gasPrice: string },
        callBack: (error: Error | void, result: string[]) => any
      ) => IDeployPromise<string[]>
      estimateGas: (
        options: { from: string; gas: string; gasPrice: string },
        callBack: (error: Error | void, result: string[]) => any
      ) => Promise<string[]>
      encodeABI: () => string
    }
  }
  once: (
    eventName: IAdFactoryEvents,
    options: IEventOptions,
    callBack: EventCallBack
  ) => void
  getPastEvents: (
    eventName: IAdFactoryEvents,
    options: IEventOptions,
    callBack?: EventCallBack
  ) => Promise<Event[]>
  events: {
    ContractCreated: (
      options: IEventOptions,
      callBack?: IEventOptions
    ) => EventEmitter
  }
}
