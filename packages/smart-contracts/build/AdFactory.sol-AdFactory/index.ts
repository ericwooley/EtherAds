/* tslint:disable */
/**
 * This file was auto generated by generate-types, written by https://github.com/ericwooley.
 * Edit at your own risk.
 **/

import BigNumber from 'bignumber.js'

type DeployEventEmitter<T> = { on: (event: string, callBack: (...args: any[]) => any) => IDeployPromise<T>}

interface IDeployPromise<T> {
  send: (options?: {
        from?: string,
        gas?: number|string,
        gasPrice?: number|string,
        value?: number|string
      }, onError?: (error: Error, transactionHash: string) => any) =>
        Promise<T> & { on: (event: string, callBack: Function) => IDeployPromise<T>}
}

type DeployArgs = {
  data: string,
  arguments: [string]
}

type IAdFactoryEvents = "ContractCreated" | "allEvents";

interface Event {
  returnValues: Object,
  raw: {
      data: string,
      topics: string[],
  },
  event: string,
  signature: string,
  logIndex: number,
  transactionIndex: number,
  transactionHash: string,
  blockHash: string,
  blockNumber: number,
  address: string
}

interface IEventOptions {
  filter?: Object,
  fromBlock?: number,
  topics?: string[]
}


interface IReceiptEvent<T> {
    returnValues: T,
    raw: {
        data: string,
        topics: string[]
    },
    event: string,
    signature: string,
    logIndex: number,
    transactionIndex: number,
    transactionHash: string,
    blockHash: string,
    blockNumber: number,
    address: string
}
export interface IReceipt {
  "transactionHash": string,
  "transactionIndex": number,
  "blockHash": string,
  "blockNumber": number,
  "contractAddress": string,
  "cumulativeGasUsed": number,
  "gasUsed": number,
  "events": {
      ContractCreated: IReceiptEvent<{ addr: string, owner: string, value: BigNumber|number|string }>|IReceiptEvent<{ addr: string, owner: string, value: BigNumber|number|string }>[]
  }
}

type EventCallBack = (error: Error|void, event: Event) => any

type EventEmitter = {
  on: (type: "data"|"changed"|"error", callBack: (event:Event|Error) => any) => EventEmitter
}
export interface IAdFactoryDefinition {
  clone: () => IAdFactory,
  deploy: (options?: DeployArgs) => IDeployPromise<IAdFactory>
}
export interface IAdFactory {
  options: {
    address: string,
    jsonInterface: Object[],
    data: string,
    from: string,
    gasPrice: string,
    gas: BigNumber
  },
  methods: {
    withdraw: () => {
      call: (options?: {from: string, gas?: string, gasPrice?: string}, callBack?: (error: Error|void, result: null) => any) => Promise<null>,
      send: (options?: {from: string, gas?: string, gasPrice?: string, value?: string|number|BigNumber}, callBack?: (error: Error|void, result: null) => any) => IDeployPromise<null>,
      estimateGas: (options?: {from: string, gas?: string, gasPrice?: string, value?: string|number|BigNumber}, callBack?: (error: Error|void, result: null) => any) => Promise<BigNumber>,
      encodeABI: () => string
    },
    deployAd: (_weiPerHour: BigNumber|number|string, _autoApprove: boolean) => {
      call: (options?: {from: string, gas?: string, gasPrice?: string}, callBack?: (error: Error|void, result: null) => any) => Promise<null>,
      send: (options?: {from: string, gas?: string, gasPrice?: string, value?: string|number|BigNumber}, callBack?: (error: Error|void, result: null) => any) => IDeployPromise<null>,
      estimateGas: (options?: {from: string, gas?: string, gasPrice?: string, value?: string|number|BigNumber}, callBack?: (error: Error|void, result: null) => any) => Promise<BigNumber>,
      encodeABI: () => string
    },
    donationAddress: () => {
      call: (options?: {from: string, gas?: string, gasPrice?: string}, callBack?: (error: Error|void, result: string) => any) => Promise<string>,
      send: (options?: {from: string, gas?: string, gasPrice?: string, value?: string|number|BigNumber}, callBack?: (error: Error|void, result: string) => any) => IDeployPromise<string>,
      estimateGas: (options?: {from: string, gas?: string, gasPrice?: string, value?: string|number|BigNumber}, callBack?: (error: Error|void, result: string) => any) => Promise<BigNumber>,
      encodeABI: () => string
    }
  },
  once: (eventName: IAdFactoryEvents, options: IEventOptions, callBack: EventCallBack) => void,
  getPastEvents: (eventName: IAdFactoryEvents, options: IEventOptions, callBack?: EventCallBack) => Promise<Event[]>,
  events: {
    ContractCreated: (options: IEventOptions, callBack?: IEventOptions) => EventEmitter
  }
}